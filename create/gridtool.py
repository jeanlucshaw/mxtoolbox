"""
Generate 2D grids from command line.

Starting grid domain is square but this can be modified through
masking grid points. Masking is done through the use of 2 column
mask files (.mask) containing (x, y) polygon coordinates. Domain
points inside the polygon are excluded from output. Mask files
should use space as a delimiter.

Examples
--------

When the output is not specified, gridtools prints to standard
out. Coordinates can then be saved through redirection.

.. code::

    $ gridtool xmin xmax ymin ymax dx dy > gridfile.dat

The same result can be achieved by setting the `-o` option to
the name of the output grid file.

.. code::

    $ gridtool xmin xmax ymin ymax dx dy -o gridfile.dat

Setting `-o` to `plot` is a special case that results in
visualizing the grid and mask polygons instead of saving
to file.

.. code::

    $ gridtool xmin xmax ymin ymax dx dy -o plot

Output coordinates can be formatted via the `-f` and `-F`
options. The format syntax is (pad char)(width).(decimals)f
for floats and (pad char)(width)d for integers.

.. code::

    $ gridtool xmin xmax ymin ymax dx dy -f 08.3f -F .3f

"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import mxtoolbox.process as ps
import argparse


# Make the initial grid
def flat_2D_grid(bounds, dx, dy):
    """
    Form 2D cartesian grid and store in dataframe.

    Parameters
    ----------
    bounds : 4-sequence
        Grid domain (xmin, xmax, ymin, ymax).
    dx, dy : float
        Grid horizontal and vertical resolutions.

    Returns
    -------
    pandas.DataFrame
        Columns are x and y coordinates.

    """
    x = np.arange(bounds[0], bounds[1] + dx, dx)
    y = np.arange(bounds[2], bounds[3] + dy, dy)
    x_grid, y_grid = np.meshgrid(x, y)
    x_grid, y_grid = x_grid.flatten(), y_grid.flatten()

    return pd.DataFrame({'x': x_grid,
                         'y': y_grid,
                         'masked': np.zeros(x_grid.size, dtype='bool')})


def apply_mask(dataframe, mask_files):
    """
    Remove grid points contained in mask polygons.

    Parameters
    ----------
    dataframe : pandas.DataFrame
        As generated by `flat_2D_grid`.
    mask_files : sequence of str
        Names and paths of mask files.

    Returns
    -------
    pandas.DataFrame
        Input dataframe with masked elements removed.

    """
    condition = '%f < x < %f & %f < y < %f & not masked'
    for file_ in mask_files:
        # Get mask polygon coordinates
        x_mask, y_mask = np.loadtxt(file_, unpack=True)

        # Subset grid to candidates
        df_candidates = dataframe.query(condition % (x_mask.min(), x_mask.max(),
                                                     y_mask.min(), y_mask.max()))

        # Find points inside mask polygon
        inside = ps.in_polygon(df_candidates.x.values,
                               df_candidates.y.values,
                               x_mask,
                               y_mask)
        target_index = df_candidates.loc[inside].index.values
        dataframe.at[target_index, 'masked'] = True

    # Convert to list for output
    return dataframe.query('not masked').reset_index()


def apply_domain(dataframe, domain_file):
    """
    Remove grid points outside the domain polygon.

    Parameters
    ----------
    dataframe : pandas.DataFrame
        As generated by `flat_2D_grid`.
    domain_file : str
        Name and path of domain file.

    Returns
    -------
    pandas.DataFrame
        Input dataframe with outside elements removed.

    """
    # Get domain polygon coordinates
    x_dom, y_dom = np.loadtxt(domain_file, unpack=True)

    # Find points inside mask polygon
    inside = ps.in_polygon(dataframe.x.values,
                           dataframe.y.values,
                           x_dom,
                           y_dom)

    # Keep only points inside domain 
    return dataframe.loc[inside].reset_index()


# Command line interface
if __name__ == '__main__':
    # Set up parser
    parser  = argparse.ArgumentParser(usage=__doc__)

    # Define arguments
    parser.add_argument('bounds',
                        metavar='',
                        help='''Horizontal and vertical grid bounds specified
                        in the form `x_min x_max y_min y_max`''',
                        type=float,
                        nargs=4)
    parser.add_argument('dx',
                        metavar='',
                        type=float,
                        help='Horizontal grid resolution.')
    parser.add_argument('dy',
                        metavar='',
                        type=float,
                        help='Vertical grid resolution.')
    parser.add_argument('-d',
                        '--domain',
                        metavar='',
                        help='Name and path to domain file.')
    parser.add_argument('-f',
                        '--xformat',
                        metavar='',
                        help='String format of x coordinate.')
    parser.add_argument('-F',
                        '--yformat',
                        metavar='',
                        help='String format of y coordinate.')
    parser.add_argument('-m',
                        '--maskfiles',
                        metavar='',
                        help='Name and path to mask file or * expression.',
                        nargs='+')
    parser.add_argument('-o',
                        '--output',
                        metavar='',
                        help='Name of output file.')
    parser.add_argument('-s',
                        '--separator',
                        metavar='',
                        help='Output file delimiter.')
    args = parser.parse_args()

    # Manage defaults
    xformat = '%' + (args.xformat or '.3f')
    yformat = '%' + (args.yformat or '.3f')
    separator = args.separator or ' '

    # Generate grid dataframe
    grid = flat_2D_grid(args.bounds, args.dx, args.dy)

    # Apply domain filter
    if args.domain:
        grid = apply_domain(grid, args.domain)

    # Apply masks
    if args.maskfiles:
        grid = apply_mask(grid, args.maskfiles)

    # Convert to lists to work with map
    x_list, y_list = list(grid.x), list(grid.y)

    # Visualize grid 
    if args.output == 'plot':
        # Unmasked grid points 
        plt.scatter(x=x_list, y=y_list, c='k')

        # Mask polygons
        if args.maskfiles:
            for file_ in args.maskfiles:
                # Get mask polygon coordinates
                x_mask, y_mask = np.loadtxt(file_, unpack=True)

                plt.plot(x_mask, y_mask, 'r')

        plt.show()

    # Print to file
    elif args.output:
        # Apply formating
        x_fmt = list(map(lambda x: xformat % x, x_list))
        y_fmt = list(map(lambda y: yformat % y, y_list))

        # Write out
        kw = dict(header=False, index=False, sep=separator)
        pd.DataFrame({'x': x_fmt, 'y': y_fmt}).to_csv(args.output, **kw)

    # Print to standard out
    else:
        fmt = xformat + separator + yformat
        for x_val, y_val in zip(x_list, y_list):
            print(fmt % (x_val, y_val))
